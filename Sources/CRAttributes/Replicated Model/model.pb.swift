// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct OperationID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lamport: Int64 = 0

  ///UUID to 16 bytes
  var peerID: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct BaseOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: Int64 = 0

  var id: OperationID {
    get {return _id ?? OperationID()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var parentID: OperationID {
    get {return _parentID ?? OperationID()}
    set {_parentID = newValue}
  }
  /// Returns true if `parentID` has been explicitly set.
  var hasParentID: Bool {return self._parentID != nil}
  /// Clears the value of `parentID`. Subsequent reads from it will return its default value.
  mutating func clearParentID() {self._parentID = nil}

  /// TODO: it's not always needed so maybe handcraft the objects
  var attributeID: OperationID {
    get {return _attributeID ?? OperationID()}
    set {_attributeID = newValue}
  }
  /// Returns true if `attributeID` has been explicitly set.
  var hasAttributeID: Bool {return self._attributeID != nil}
  /// Clears the value of `attributeID`. Subsequent reads from it will return its default value.
  mutating func clearAttributeID() {self._attributeID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: OperationID? = nil
  fileprivate var _parentID: OperationID? = nil
  fileprivate var _attributeID: OperationID? = nil
}

struct ObjectOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: BaseOperation {
    get {return _base ?? BaseOperation()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var rawType: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: BaseOperation? = nil
}

struct AttributeOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: BaseOperation {
    get {return _base ?? BaseOperation()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var name: String = String()

  var rawType: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: BaseOperation? = nil
}

struct DeleteOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: BaseOperation {
    get {return _base ?? BaseOperation()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: BaseOperation? = nil
}

struct LLWOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var int: Int64 = 0

  var float: Float = 0

  var date: Double = 0

  var boolean: Bool = false

  var string: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StringInsertOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: BaseOperation {
    get {return _base ?? BaseOperation()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var contribution: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: BaseOperation? = nil
}

struct OperationsBundle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: Int64 = 0

  var attributeID: OperationID {
    get {return _attributeID ?? OperationID()}
    set {_attributeID = newValue}
  }
  /// Returns true if `attributeID` has been explicitly set.
  var hasAttributeID: Bool {return self._attributeID != nil}
  /// Clears the value of `attributeID`. Subsequent reads from it will return its default value.
  mutating func clearAttributeID() {self._attributeID = nil}

  var objectOperations: [ObjectOperation] = []

  var attributeOperations: [AttributeOperation] = []

  var deleteOperations: [DeleteOperation] = []

  var llwOperations: [LLWOperation] = []

  var stringInsertOperations: [StringInsertOperation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _attributeID: OperationID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension OperationID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OperationID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lamport"),
    2: .same(proto: "peerID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.lamport) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.peerID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lamport != 0 {
      try visitor.visitSingularInt64Field(value: self.lamport, fieldNumber: 1)
    }
    if !self.peerID.isEmpty {
      try visitor.visitSingularBytesField(value: self.peerID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OperationID, rhs: OperationID) -> Bool {
    if lhs.lamport != rhs.lamport {return false}
    if lhs.peerID != rhs.peerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BaseOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BaseOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "id"),
    3: .same(proto: "parentID"),
    4: .same(proto: "attributeID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._parentID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._attributeID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 1)
    }
    if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._parentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._attributeID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: BaseOperation, rhs: BaseOperation) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._id != rhs._id {return false}
    if lhs._parentID != rhs._parentID {return false}
    if lhs._attributeID != rhs._attributeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ObjectOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ObjectOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "rawType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.rawType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.rawType != 0 {
      try visitor.visitSingularInt64Field(value: self.rawType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ObjectOperation, rhs: ObjectOperation) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.rawType != rhs.rawType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AttributeOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AttributeOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "name"),
    3: .same(proto: "rawType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.rawType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.rawType != 0 {
      try visitor.visitSingularInt64Field(value: self.rawType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AttributeOperation, rhs: AttributeOperation) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.name != rhs.name {return false}
    if lhs.rawType != rhs.rawType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeleteOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeleteOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeleteOperation, rhs: DeleteOperation) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLWOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LLWOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "int"),
    2: .same(proto: "float"),
    3: .same(proto: "date"),
    4: .same(proto: "boolean"),
    5: .same(proto: "string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.int) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.float) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.date) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.boolean) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.string) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.int != 0 {
      try visitor.visitSingularInt64Field(value: self.int, fieldNumber: 1)
    }
    if self.float != 0 {
      try visitor.visitSingularFloatField(value: self.float, fieldNumber: 2)
    }
    if self.date != 0 {
      try visitor.visitSingularDoubleField(value: self.date, fieldNumber: 3)
    }
    if self.boolean != false {
      try visitor.visitSingularBoolField(value: self.boolean, fieldNumber: 4)
    }
    if !self.string.isEmpty {
      try visitor.visitSingularStringField(value: self.string, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LLWOperation, rhs: LLWOperation) -> Bool {
    if lhs.int != rhs.int {return false}
    if lhs.float != rhs.float {return false}
    if lhs.date != rhs.date {return false}
    if lhs.boolean != rhs.boolean {return false}
    if lhs.string != rhs.string {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StringInsertOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StringInsertOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "contribution"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contribution) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.contribution.isEmpty {
      try visitor.visitSingularStringField(value: self.contribution, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StringInsertOperation, rhs: StringInsertOperation) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.contribution != rhs.contribution {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OperationsBundle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OperationsBundle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "attributeID"),
    3: .same(proto: "objectOperations"),
    4: .same(proto: "attributeOperations"),
    5: .same(proto: "deleteOperations"),
    6: .same(proto: "llwOperations"),
    7: .same(proto: "stringInsertOperations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._attributeID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.objectOperations) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.attributeOperations) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.deleteOperations) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.llwOperations) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.stringInsertOperations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 1)
    }
    if let v = self._attributeID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.objectOperations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objectOperations, fieldNumber: 3)
    }
    if !self.attributeOperations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributeOperations, fieldNumber: 4)
    }
    if !self.deleteOperations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deleteOperations, fieldNumber: 5)
    }
    if !self.llwOperations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.llwOperations, fieldNumber: 6)
    }
    if !self.stringInsertOperations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stringInsertOperations, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OperationsBundle, rhs: OperationsBundle) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._attributeID != rhs._attributeID {return false}
    if lhs.objectOperations != rhs.objectOperations {return false}
    if lhs.attributeOperations != rhs.attributeOperations {return false}
    if lhs.deleteOperations != rhs.deleteOperations {return false}
    if lhs.llwOperations != rhs.llwOperations {return false}
    if lhs.stringInsertOperations != rhs.stringInsertOperations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
